name: Docker and Apptainer Build and Push

on:
  workflow_run:
    workflows: [ "Make Project" ]
    types:
      - completed
  workflow_dispatch:

jobs:

  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - 
        name: Set the environment variables
        run: |
          echo "NOW=$( date '+%F-%H%M%S%2N' )" >> $GITHUB_ENV
          echo "APPTAINER_VERSION=$(curl -s "https://api.github.com/repos/apptainer/apptainer/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')" >> $GITHUB_ENV
      -
        name: Checkout 
        uses: actions/checkout@v4
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - 
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Docker build and push
        uses: docker/build-push-action@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          context: .
          platforms: linux/amd64,linux/arm64
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_CONTAINER }}:latest, ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_CONTAINER }}:${{ env.NOW }}
      -
        name: Set up Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: ${{ env.APPTAINER_VERSION }}
      -
        name: Build Apptainer container
        run: apptainer build ${{ secrets.DOCKER_HUB_CONTAINER }}-${{ env.NOW }}.sif docker://${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_CONTAINER }}:${{ env.NOW }}
      -
        name: Run Apptainer container
        run: |
          apptainer exec ${{ secrets.DOCKER_HUB_CONTAINER }}-${{ env.NOW }}.sif cat /etc/os-release
          apptainer exec ${{ secrets.DOCKER_HUB_CONTAINER }}-${{ env.NOW }}.sif cat /srv/build/CONTAINER_RELEASE_MSG > release.txt
      -
        name: Upload Singularity Image File
        uses: actions/upload-artifact@v3
        with:
          name: ${{ secrets.DOCKER_HUB_CONTAINER }}-${{ env.NOW }}.sif
          path: ./${{ secrets.DOCKER_HUB_CONTAINER }}-${{ env.NOW }}.sif
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ secrets.DOCKER_HUB_CONTAINER }}-${{ env.NOW }}.sif
      -
        name: Test artifact download
        run: ls -R
      -
        name: Zip artifact
        uses: thedoctor0/zip-release@0.7.1
        with:
          filename: ${{ secrets.DOCKER_HUB_CONTAINER }}-${{ env.NOW }}.zip
          exclusions: '*.git* Dockerfile Makefile project.Rproj README.md *.devcontainer/* /*scripts/* *.setup/*'
      - 
        name: GitHub release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ./release.txt
          files: ./${{ secrets.DOCKER_HUB_CONTAINER }}-${{ env.NOW }}.zip
          name: ${{ secrets.DOCKER_HUB_CONTAINER }}-${{ env.NOW }}
          tag_name: ${{ env.NOW }}





name: ci

on:
  push:
    branches:
      - "main"

env:
  REGISTRY_IMAGE: user/app

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}